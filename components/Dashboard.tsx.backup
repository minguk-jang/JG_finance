import React, { useEffect, useState } from 'react';
import { XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, LineChart, Line, PieChart, Pie, Cell } from 'recharts';
import { Currency } from '../types';
import Card from './ui/Card';
import { USD_KRW_EXCHANGE_RATE } from '../constants';
import { api } from '../lib/api';

interface DashboardProps {
  currency: Currency;
}

const formatCurrency = (value: number, currency: Currency) => {
  const amount = currency === 'USD' ? value / USD_KRW_EXCHANGE_RATE : value;
  return new Intl.NumberFormat(currency === 'KRW' ? 'ko-KR' : 'en-US', {
    style: 'currency',
    currency: currency,
    minimumFractionDigits: 0,
  }).format(amount);
};

const Dashboard: React.FC<DashboardProps> = ({ currency }) => {
  const [expenses, setExpenses] = useState<any[]>([]);
  const [categories, setCategories] = useState<any[]>([]);
  const [budgets, setBudgets] = useState<any[]>([]);
  const [holdings, setHoldings] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedMonth, setSelectedMonth] = useState<string>('');

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [expensesData, categoriesData, budgetsData, holdingsData] = await Promise.all([
          api.getExpenses(),
          api.getCategories(),
          api.getBudgets(),
          api.getHoldings(),
        ]);

        setExpenses(Array.isArray(expensesData) ? expensesData : []);
        setCategories(Array.isArray(categoriesData) ? categoriesData : []);

        const normalizedBudgets = (Array.isArray(budgetsData) ? budgetsData : []).map((budget: any) => ({
          id: budget.id,
          categoryId: budget.categoryId ?? budget.category_id,
          month: budget.month,
          limitAmount: budget.limitAmount ?? budget.limit_amount,
        }));
        setBudgets(normalizedBudgets);

        setHoldings(Array.isArray(holdingsData) ? holdingsData : []);
      } catch (err) {
        console.error('Failed to fetch dashboard data:', err);
        setError('대시보드 데이터를 불러오지 못했습니다. 서버 상태를 확인해주세요.');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  if (loading) {
    return <div className="text-center text-gray-400 p-8">로딩중...</div>;
  }

  if (error) {
    return (
      <Card title="대시보드">
        <p className="text-red-400 text-sm">{error}</p>
      </Card>
    );
  }

  const nowMonth = new Date().toISOString().slice(0, 7);
  const monthsFromExpenses = expenses
    .map((expense) => (typeof expense.date === 'string' ? expense.date.slice(0, 7) : null))
    .filter((month): month is string => Boolean(month));
  const monthsFromBudgets = budgets
    .map((budget) => budget.month)
    .filter((month): month is string => Boolean(month));
  const availableMonths = Array.from(new Set([...monthsFromExpenses, ...monthsFromBudgets])).sort(
    (a, b) => b.localeCompare(a)
  );
  useEffect(() => {
    if (availableMonths.length === 0) {
      return;
    }
    if (!selectedMonth) {
      if (availableMonths.includes(nowMonth)) {
        setSelectedMonth(nowMonth);
      } else {
        setSelectedMonth(availableMonths[0]);
      }
    } else if (!availableMonths.includes(selectedMonth)) {
      setSelectedMonth(availableMonths[0]);
    }
  }, [availableMonths.join(','), nowMonth, selectedMonth]);

  const activeMonth = selectedMonth || availableMonths[0] || nowMonth;
  const categoriesById = new Map<number, any>(categories.map((category) => [category.id, category]));

  const monthlyExpenses = expenses.filter(
    (expense) =>
      typeof expense.date === 'string' &&
      expense.date.startsWith(activeMonth) &&
      categoriesById.get(expense.category_id)?.type === 'expense',
  );
  const monthlyIncomes = expenses.filter(
    (expense) =>
      typeof expense.date === 'string' &&
      expense.date.startsWith(activeMonth) &&
      categoriesById.get(expense.category_id)?.type === 'income',
  );
  const previousIndex = availableMonths.indexOf(activeMonth) + 1;
  const previousMonthKey = previousIndex > 0 && previousIndex < availableMonths.length ? availableMonths[previousIndex] : null;
  const previousExpenses = previousMonthKey
    ? expenses.filter(
        (expense) =>
          typeof expense.date === 'string' &&
          expense.date.startsWith(previousMonthKey) &&
          categoriesById.get(expense.category_id)?.type === 'expense',
      )
    : [];
  const previousIncomes = previousMonthKey
    ? expenses.filter(
        (expense) =>
          typeof expense.date === 'string' &&
          expense.date.startsWith(previousMonthKey) &&
          categoriesById.get(expense.category_id)?.type === 'income',
      )
    : [];

  const totalExpense = monthlyExpenses.reduce((sum, expense) => sum + (expense.amount ?? 0), 0);
  const totalIncome = monthlyIncomes.reduce((sum, income) => sum + (income.amount ?? 0), 0);
  const netIncome = totalIncome - totalExpense;
  const monthBudgets = budgets.filter((budget) => budget.month === activeMonth);
  const totalBudgetLimit = monthBudgets.reduce((sum, budget) => sum + (budget.limitAmount ?? 0), 0);
  const totalBudgetSpent = monthlyExpenses.reduce((sum, expense) => sum + (expense.amount ?? 0), 0);
  const budgetUsage = totalBudgetLimit > 0 ? (totalBudgetSpent / totalBudgetLimit) * 100 : 0;
  const previousExpenseTotal = previousExpenses.reduce((sum, expense) => sum + (expense.amount ?? 0), 0);
  const previousIncomeTotal = previousIncomes.reduce((sum, income) => sum + (income.amount ?? 0), 0);
  const previousNetIncome = previousIncomeTotal - previousExpenseTotal;

  const totalHoldingsValue = holdings.reduce((sum, holding) => {
    const qty = holding.qty ?? 0;
    const price = holding.current_price ?? holding.currentPrice ?? 0;
    return sum + price * qty;
  }, 0);

  const budgetData = budgets
    .filter((budget) => budget.month === activeMonth)
    .map((budget) => {
      const categoryId = budget.categoryId ?? budget.category_id;
      const category = categoriesById.get(categoryId);
      const limit = budget.limitAmount || 0;
      const spent = monthlyExpenses
        .filter((expense) => expense.category_id === categoryId)
        .reduce((sum, expense) => sum + (expense.amount ?? 0), 0);
      const percentage = limit > 0 ? Math.min((spent / limit) * 100, 100) : 0;
      return {
        name: category?.name || '미지정',
        spent,
        limit,
        percentage,
      };
    });

  const monthlyAggregates: Record<string, { income: number; expense: number }> = {};
  expenses.forEach((expense) => {
    if (!expense?.date) {
      return;
    }
    const monthKey = expense.date.slice(0, 7);
    if (!monthlyAggregates[monthKey]) {
      monthlyAggregates[monthKey] = { income: 0, expense: 0 };
    }
    const category = categoriesById.get(expense.category_id);
    if (category?.type === 'income') {
      monthlyAggregates[monthKey].income += expense.amount ?? 0;
    } else {
      monthlyAggregates[monthKey].expense += expense.amount ?? 0;
    }
  });

  const sortedMonths = Object.keys(monthlyAggregates).sort();
  const recentMonths = sortedMonths.slice(-6);
  const netIncomeTrend =
    recentMonths.length > 0
      ? recentMonths.map((month) => {
          const { income, expense } = monthlyAggregates[month];
          return {
            name: month,
            value: income - expense,
          };
        })
      : [
          {
            name: activeMonth,
            value: netIncome,
          },
        ];

  const budgetOverages = budgetData.filter((item) => item.percentage > 100);

  const expenseByCategory = categories
    .filter((category) => category.type === 'expense')
    .map((category) => ({
      name: category.name,
      amount: monthlyExpenses
        .filter((expense) => expense.category_id === category.id)
        .reduce((sum, expense) => sum + (expense.amount ?? 0), 0),
    }))
    .filter((entry) => entry.amount > 0);
  const incomeByCategory = categories
    .filter((category) => category.type === 'income')
    .map((category) => ({
      name: category.name,
      amount: monthlyIncomes
        .filter((income) => income.category_id === category.id)
        .reduce((sum, income) => sum + (income.amount ?? 0), 0),
    }))
    .filter((entry) => entry.amount > 0);
  const sortedExpenseCategories = [...expenseByCategory].sort((a, b) => b.amount - a.amount);
  const sortedIncomeCategories = [...incomeByCategory].sort((a, b) => b.amount - a.amount);
  const topExpenseCategories = sortedExpenseCategories.slice(0, 5);
  const topIncomeCategories = sortedIncomeCategories.slice(0, 5);
  const topExpenses = [...monthlyExpenses]
    .sort((a, b) => (b.amount ?? 0) - (a.amount ?? 0))
    .slice(0, 3);
  const topIncomes = [...monthlyIncomes]
    .sort((a, b) => (b.amount ?? 0) - (a.amount ?? 0))
    .slice(0, 3);
  const getCategoryName = (id: number) => categoriesById.get(id)?.name || '미지정';
  const formatDelta = (value: number) => `${value >= 0 ? '+' : '-'}${formatCurrency(Math.abs(value), currency)}`;

  const holdingsAllocation = holdings
    .map((holding) => ({
      name: holding.name ?? holding.symbol ?? `Asset ${holding.id}`,
      value: (holding.current_price ?? holding.currentPrice ?? 0) * (holding.qty ?? 0),
    }))
    .filter((entry) => entry.value > 0);

  const PIE_COLORS = ['#0EA5E9', '#0284C7', '#38BDF8', '#7DD3FC', '#A5D5F8', '#C4E4F9'];
  const HOLDINGS_COLORS = ['#2563EB', '#7C3AED', '#F97316', '#10B981', '#F59E0B', '#EF4444'];

  const handleMonthChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    setSelectedMonth(event.target.value);
  };

  const handleExportCsv = () => {
    const rows: (string | number)[][] = [
      ['Section', 'Date', 'Category', 'Amount', 'Memo'],
      ...monthlyIncomes.map((income) => [
        'Income',
        income.date,
        getCategoryName(income.category_id),
        income.amount ?? 0,
        income.memo ?? '',
      ]),
      ...monthlyExpenses.map((expense) => [
        'Expense',
        expense.date,
        getCategoryName(expense.category_id),
        expense.amount ?? 0,
        expense.memo ?? '',
      ]),
      ...budgetData.map((item) => [
        'Budget',
        activeMonth,
        item.name,
        item.limit ?? 0,
        `Spent ${item.spent ?? 0}`,
      ]),
    ];
    const csv = rows
      .map((row) =>
        row
          .map((value) => {
            const cell = String(value ?? '');
            if (cell.includes('"') || cell.includes(',') || cell.includes('\n')) {
              return `"${cell.replace(/"/g, '""')}"`;
            }
            return cell;
          })
          .join(',')
      )
      .join('\n');
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `dashboard-${activeMonth}.csv`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const handleExportPdf = () => {
    window.print();
  };

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h2 className="text-2xl font-bold">대시보드 요약</h2>
          <p className="text-sm text-gray-400">선택한 월의 수입·지출·예산 현황을 확인하세요.</p>
        </div>
        <div className="flex flex-col sm:flex-row sm:items-center gap-3">
          <div className="flex items-center gap-2">
            <label htmlFor="dashboard-month-select" className="text-sm text-gray-400">
              월 선택
            </label>
            <select
              id="dashboard-month-select"
              value={activeMonth}
              onChange={handleMonthChange}
              className="bg-gray-800 border border-gray-600 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-sky-500 text-gray-100"
            >
              {availableMonths.length === 0 && <option value={nowMonth}>{nowMonth}</option>}
              {availableMonths.map((month) => (
                <option key={month} value={month}>
                  {month}
                </option>
              ))}
            </select>
          </div>
          <div className="flex items-center gap-2">
            <button
              onClick={handleExportCsv}
              className="px-3 py-2 text-sm bg-sky-600 hover:bg-sky-700 text-white rounded-lg transition"
            >
              CSV 내보내기
            </button>
            <button
              onClick={handleExportPdf}
              className="px-3 py-2 text-sm bg-gray-700 hover:bg-gray-600 text-gray-200 rounded-lg transition"
            >
              PDF/인쇄
            </button>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card title={`월 요약 (${activeMonth})`} className="lg:col-span-4">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 text-center">
            <div>
              <p className="text-gray-400">총 수입</p>
              <p className="text-2xl font-bold text-green-400">{formatCurrency(totalIncome, currency)}</p>
              {previousMonthKey && (
                <p className={`text-xs ${totalIncome - previousIncomeTotal >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                  {previousMonthKey} 대비 {formatDelta(totalIncome - previousIncomeTotal)}
                </p>
              )}
            </div>
            <div>
              <p className="text-gray-400">총 지출</p>
              <p className="text-2xl font-bold text-red-400">{formatCurrency(totalExpense, currency)}</p>
              {previousMonthKey && (
                <p className={`text-xs ${totalExpense - previousExpenseTotal > 0 ? 'text-red-400' : 'text-green-400'}`}>
                  {previousMonthKey} 대비 {formatDelta(totalExpense - previousExpenseTotal)}
                </p>
              )}
            </div>
            <div>
              <p className="text-gray-400">순수입</p>
              <p className="text-2xl font-bold text-sky-400">{formatCurrency(netIncome, currency)}</p>
              {previousMonthKey && (
                <p className={`text-xs ${netIncome - previousNetIncome >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                  {previousMonthKey} 대비 {formatDelta(netIncome - previousNetIncome)}
                </p>
              )}
            </div>
            <div>
              <p className="text-gray-400">예산 사용</p>
              <p className="text-2xl font-bold text-indigo-400">
                {totalBudgetLimit > 0
                  ? `${formatCurrency(totalBudgetSpent, currency)} / ${formatCurrency(totalBudgetLimit, currency)}`
                  : '예산 없음'}
              </p>
              {totalBudgetLimit > 0 && (
                <p className={`text-sm font-semibold ${budgetUsage > 100 ? 'text-red-400' : 'text-gray-400'}`}>
                  {budgetUsage.toFixed(1)}%
                </p>
              )}
            </div>
          </div>
        </Card>

      <Card title={`예산 대비 지출 (${activeMonth})`} className="lg:col-span-4">
        {budgetData.length === 0 ? (
          <div className="text-center text-gray-400 py-6">이번 달에 설정된 예산이 없습니다. 설정 페이지에서 예산을 추가해보세요.</div>
        ) : (
          <div className="space-y-4">
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
              {budgetData.map((item) => (
                <div key={item.name} className="flex flex-col items-center">
                  <div className="relative w-24 h-24">
                    <svg className="w-full h-full" viewBox="0 0 36 36">
                      <path
                        d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                        fill="none"
                        stroke="#374151"
                        strokeWidth="3"
                      />
                      <path
                        d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                        fill="none"
                        stroke="#0EA5E9"
                        strokeWidth="3"
                        strokeDasharray={`${item.percentage}, 100`}
                      />
                    </svg>
                    <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-lg font-semibold">{`${Math.round(
                      item.percentage,
                    )}%`}</div>
                  </div>
                  <p className="mt-2 text-sm text-gray-400">{item.name}</p>
                  <p className="text-xs">{formatCurrency(item.spent, currency)}</p>
                </div>
              ))}
            </div>
            {budgetOverages.length > 0 && (
              <div className="bg-red-500/10 border border-red-500/30 rounded-lg px-4 py-3 text-sm text-red-300">
                <p className="font-semibold mb-1">예산 초과 경고</p>
                <ul className="list-disc list-inside space-y-1">
                  {budgetOverages.map((item) => (
                    <li key={item.name}>
                      {item.name}: {formatCurrency(item.spent, currency)} (한도 {formatCurrency(item.limit, currency)})
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        )}
      </Card>

      <Card title="월별 순수입" className="lg:col-span-2 h-80">
        <ResponsiveContainer>
          <LineChart data={netIncomeTrend}>
            <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
            <XAxis dataKey="name" stroke="#9CA3AF" />
            <YAxis
              stroke="#9CA3AF"
              tickFormatter={(value) => formatCurrency(value as number, currency)}
              domain={['dataMin - 1000000', 'dataMax + 1000000']}
            />
            <Tooltip
              contentStyle={{ backgroundColor: '#1F2937', border: 'none' }}
              formatter={(value) => formatCurrency(value as number, currency)}
            />
            <Line type="monotone" dataKey="value" stroke="#0EA5E9" strokeWidth={2} dot={{ r: 4 }} activeDot={{ r: 6 }} />
          </LineChart>
        </ResponsiveContainer>
      </Card>

      <Card title="카테고리별 지출" className="lg:col-span-2 h-80">
        <ResponsiveContainer>
          <PieChart>
            <Pie data={expenseByCategory} dataKey="amount" nameKey="name" cx="50%" cy="50%" outerRadius={100} fill="#8884d8">
              {expenseByCategory.map((entry, index) => (
                <Cell key={`expense-cell-${index}`} fill={PIE_COLORS[index % PIE_COLORS.length]} />
              ))}
            </Pie>
            <Tooltip
              contentStyle={{ backgroundColor: '#1F2937', border: 'none' }}
              formatter={(value) => formatCurrency(value as number, currency)}
            />
            <Legend />
          </PieChart>
        </ResponsiveContainer>
      </Card>

      <Card title="카테고리 & 주요 내역" className="lg:col-span-2">
        <div className="grid grid-cols-1 gap-6">
          <div>
            <h4 className="text-sm font-semibold text-gray-300 mb-2">지출 카테고리 TOP5</h4>
            {topExpenseCategories.length === 0 ? (
              <p className="text-xs text-gray-500">지출 데이터가 없습니다.</p>
            ) : (
              <table className="w-full text-sm">
                <thead className="text-gray-400">
                  <tr>
                    <th className="py-1 text-left">카테고리</th>
                    <th className="py-1 text-right">금액</th>
                  </tr>
                </thead>
                <tbody>
                  {topExpenseCategories.map((item) => (
                    <tr key={item.name} className="border-t border-gray-700">
                      <td className="py-1">{item.name}</td>
                      <td className="py-1 text-right text-red-400">{formatCurrency(item.amount, currency)}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            )}
          </div>
          <div>
            <h4 className="text-sm font-semibold text-gray-300 mb-2">수입 카테고리 TOP5</h4>
            {topIncomeCategories.length === 0 ? (
              <p className="text-xs text-gray-500">수입 데이터가 없습니다.</p>
            ) : (
              <table className="w-full text-sm">
                <thead className="text-gray-400">
                  <tr>
                    <th className="py-1 text-left">카테고리</th>
                    <th className="py-1 text-right">금액</th>
                  </tr>
                </thead>
                <tbody>
                  {topIncomeCategories.map((item) => (
                    <tr key={item.name} className="border-t border-gray-700">
                      <td className="py-1">{item.name}</td>
                      <td className="py-1 text-right text-green-400">{formatCurrency(item.amount, currency)}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            )}
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h4 className="text-sm font-semibold text-gray-300 mb-2">지출 TOP3</h4>
              <ul className="space-y-2 text-sm">
                {topExpenses.map((expense) => (
                  <li key={expense.id} className="flex items-center justify-between border-b border-gray-700 pb-1">
                    <span className="text-gray-300">{getCategoryName(expense.category_id)}</span>
                    <span className="text-red-400">{formatCurrency(expense.amount, currency)}</span>
                  </li>
                ))}
                {topExpenses.length === 0 && <li className="text-xs text-gray-500">지출 데이터가 없습니다.</li>}
              </ul>
            </div>
            <div>
              <h4 className="text-sm font-semibold text-gray-300 mb-2">수입 TOP3</h4>
              <ul className="space-y-2 text-sm">
                {topIncomes.map((income) => (
                  <li key={income.id} className="flex items-center justify-between border-b border-gray-700 pb-1">
                    <span className="text-gray-300">{getCategoryName(income.category_id)}</span>
                    <span className="text-green-400">{formatCurrency(income.amount, currency)}</span>
                  </li>
                ))}
                {topIncomes.length === 0 && <li className="text-xs text-gray-500">수입 데이터가 없습니다.</li>}
              </ul>
            </div>
          </div>
        </div>
      </Card>

      <Card title="투자 자산 배분" className="lg:col-span-2 h-80">
        {holdingsAllocation.length === 0 ? (
          <div className="text-center text-gray-400 p-8">투자 자산이 없습니다. 투자 페이지에서 추가해보세요.</div>
        ) : (
          <>
            <ResponsiveContainer>
              <PieChart>
                <Pie data={holdingsAllocation} dataKey="value" nameKey="name" cx="50%" cy="45%" outerRadius={100}>
                  {holdingsAllocation.map((entry, index) => (
                    <Cell key={`holding-cell-${index}`} fill={HOLDINGS_COLORS[index % HOLDINGS_COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip
                  contentStyle={{ backgroundColor: '#1F2937', border: 'none' }}
                  formatter={(value) => formatCurrency(value as number, currency)}
                />
                <Legend />
              </PieChart>
            </ResponsiveContainer>
            <div className="mt-4 text-center text-sm text-gray-300">
              총 평가액 <span className="font-semibold text-indigo-400">{formatCurrency(totalHoldingsValue, currency)}</span>
            </div>
          </>
        )}
      </Card>
      </div>
    </div>
  );
};

export default Dashboard;
